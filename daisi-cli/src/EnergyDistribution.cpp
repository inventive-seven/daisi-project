//
// Created by artoria on 5/3/20.
//
#include "EnergyDistribution.h"
#include <cmath>
#include <algorithm>
#include <iostream>
#include <random>

namespace
{
	constexpr double x[] = {-12.668877,-12.612855,-12.556834,-12.494587,-12.413667,-12.376319,-12.264276,-12.226928,-12.164682,-12.108660,-12.058863,-12.009066,-11.859675,-11.828552,-11.816103,-11.685386,-11.654263,-11.604465,-11.542219,-11.504871,-11.467524,-11.399053,-11.355480,-11.293234,-11.212314,-11.143843,-11.081597,-11.013126,-10.957104,-10.913532,-10.863735,-10.820162,-10.770365,-10.733018,-10.689445,-10.627199,-10.564953,-10.521380,-10.484032,-10.421786,-10.396888,-10.334641,-10.297294,-10.241272,-10.216373,-10.166576,-10.116779,-10.098106,-10.060758,-9.992287,-9.973613,-9.923816,-9.905142,-9.855345,-9.830447,-9.793099,-9.730852,-9.699729,-9.587686,-9.550338,-9.519215,-9.481867,-9.432070,-9.376049,-9.338701,-9.282679,-9.245332,-9.195535,-9.114614,-9.033694,-8.983897,-8.940325,-8.865629,-8.809608,-8.703789,-8.647767,-8.604195,-8.529499,-8.504601,-8.473478,-8.361434,-8.398782,-8.261840,-8.218268,-8.174696,-8.124899,-8.093775,-8.081326,-8.075102,-8.062652,-8.025305,-7.994181,-7.944384,-7.863464,-7.851015,-7.838566,-7.801218,-7.782544,-7.770095,-7.763870,-7.763870,-7.738972,-7.682950,-7.658051,-7.626928,-7.583356,-7.558457,-7.558457,-7.546008,-7.533559,-7.508660,-7.502436,-7.489986,-7.458863,-7.421516,-7.390392,-7.353045,-7.315697,-7.272125,-7.216103,-7.166306,-7.141407,-7.104059,-7.054263,-7.023139,-6.979567,-6.942219,-6.904871,-6.879973,-6.836400,-6.792828,-6.743031,-6.711908,-6.630988,-6.574966,-6.537618,-6.494046,-6.462923,-6.438024,-6.382003,-6.319756,-6.238836,-6.120568,-6.089445,-6.002300,-5.921380,-5.778214,-5.547903,-5.336265,-5.062382,-4.944114,-4.800947,-4.620433,-4.495940,-4.302977,-4.060217,-3.798782,-3.618268,-3.493775};
	constexpr double y[] = {0.30566038,0.21886792,0.23396226,0.24528302,0.26037736,0.27547170,0.27924528,0.28679245,0.30188679,0.31320755,0.32452830,0.34339623,0.32830189,0.32830189,0.32830189,0.34716981,0.35094340,0.35849057,0.37735849,0.38490566,0.38490566,0.41509434,0.42264151,0.42264151,0.41886792,0.41886792,0.41132075,0.41132075,0.40377358,0.39245283,0.36226415,0.35471698,0.35471698,0.34339623,0.33584906,0.32830189,0.32075472,0.32075472,0.30566038,0.29056604,0.29056604,0.29056604,0.28301887,0.28301887,0.28301887,0.27547170,0.27169811,0.26037736,0.20754717,0.19622642,0.18490566,0.14716981,0.13962264,0.13584906,0.13584906,0.12452830,0.12452830,0.10943396,0.09056604,0.08679245,0.07924528,0.06792453,0.06037736,0.06037736,0.06037736,0.04528302,0.04905660,0.05660377,0.06415094,0.07924528,0.09433962,0.09811321,0.11320755,0.12452830,0.14716981,0.18867925,0.21132075,0.24528302,0.25660377,0.27924528,0.30566038,0.29433962,0.36226415,0.38113208,0.40377358,0.43396226,0.46415094,0.49056604,0.50566038,0.54339623,0.56603774,0.56603774,0.58113208,0.58490566,0.58867925,0.59622642,0.61509434,0.62641509,0.64528302,0.67924528,0.66415094,0.69056604,0.72830189,0.76603774,0.78490566,0.79245283,0.81509434,0.80000000,0.82641509,0.84150943,0.86792453,0.88679245,0.90188679,0.94716981,0.95849057,0.97358491,0.98490566,0.98867925,0.98867925,0.98113208,0.95094340,0.92830189,0.91320755,0.88679245,0.87924528,0.84905660,0.82264151,0.80000000,0.77735849,0.73584906,0.66792453,0.63018868,0.59245283,0.54716981,0.49433962,0.47169811,0.42641509,0.39622642,0.35471698,0.30943396,0.28301887,0.21886792,0.17735849,0.15849057,0.14716981,0.13207547,0.11698113,0.12452830,0.12452830,0.12452830,0.12452830,0.12452830,0.12452830,0.12830189,0.12830189,0.12830189,0.12830189,0.12830189,0.12452830};
	constexpr double Q = 2.820132465156285;
	constexpr unsigned int spectre_length = 159;
	constexpr double a = 0.045283019;
	constexpr double b = 0.98867925;

	std::default_random_engine generator;
	std::uniform_real_distribution<double> distribution(a,b);

	constexpr double trapz( unsigned int max_idx ) noexcept
	{
		double sum = 0;
		for(unsigned int i = 0; i < max_idx; ++i)
			sum += (x[i+1]-x[i])*(y[i+1]+y[i]);
		return sum/2;
	}

	constexpr unsigned int internal_pdf( unsigned int i, double alpha, double eps ) noexcept
	{
		for(;;)
		{
			if ( i == spectre_length )
				break;
			double pdf = trapz(i)/Q;
			if ( std::abs(pdf - alpha)<eps)
				break;
			++i;
		}
		return i;
	}
}

double get_initial_energy_bimodal() noexcept
{
	double alpha = distribution(generator);
	double eps = 1e-3;
	unsigned int i = 1;
	unsigned int idx = internal_pdf(i, alpha, eps);
	while ( idx == spectre_length )
	{
		eps*=10;
		i = 1;
		idx = internal_pdf(i, alpha, eps);
	}
	return x[idx];
}